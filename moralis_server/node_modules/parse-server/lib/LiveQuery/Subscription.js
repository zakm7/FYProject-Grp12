"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Subscription = void 0;

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Subscription {
  // It is query condition eg query.where
  constructor(className, query, queryHash) {
    this.className = className;
    this.query = query;
    this.hash = queryHash;
    this.clientRequestIds = new Map();
  }

  addClientSubscription(clientId, requestId) {
    if (!this.clientRequestIds.has(clientId)) {
      this.clientRequestIds.set(clientId, []);
    }

    const requestIds = this.clientRequestIds.get(clientId);
    requestIds.push(requestId);
  }

  deleteClientSubscription(clientId, requestId) {
    const requestIds = this.clientRequestIds.get(clientId);

    if (typeof requestIds === 'undefined') {
      _logger.default.error('Can not find client %d to delete', clientId);

      return;
    }

    const index = requestIds.indexOf(requestId);

    if (index < 0) {
      _logger.default.error('Can not find client %d subscription %d to delete', clientId, requestId);

      return;
    }

    requestIds.splice(index, 1); // Delete client reference if it has no subscription

    if (requestIds.length == 0) {
      this.clientRequestIds.delete(clientId);
    }
  }

  hasSubscribingClient() {
    return this.clientRequestIds.size > 0;
  }

}

exports.Subscription = Subscription;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvU3Vic2NyaXB0aW9uLmpzIl0sIm5hbWVzIjpbIlN1YnNjcmlwdGlvbiIsImNvbnN0cnVjdG9yIiwiY2xhc3NOYW1lIiwicXVlcnkiLCJxdWVyeUhhc2giLCJoYXNoIiwiY2xpZW50UmVxdWVzdElkcyIsIk1hcCIsImFkZENsaWVudFN1YnNjcmlwdGlvbiIsImNsaWVudElkIiwicmVxdWVzdElkIiwiaGFzIiwic2V0IiwicmVxdWVzdElkcyIsImdldCIsInB1c2giLCJkZWxldGVDbGllbnRTdWJzY3JpcHRpb24iLCJsb2dnZXIiLCJlcnJvciIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImxlbmd0aCIsImRlbGV0ZSIsImhhc1N1YnNjcmliaW5nQ2xpZW50Iiwic2l6ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBS0EsTUFBTUEsWUFBTixDQUFtQjtBQUNqQjtBQU1BQyxFQUFBQSxXQUFXLENBQUNDLFNBQUQsRUFBb0JDLEtBQXBCLEVBQXNDQyxTQUF0QyxFQUF5RDtBQUNsRSxTQUFLRixTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFNBQUtDLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtFLElBQUwsR0FBWUQsU0FBWjtBQUNBLFNBQUtFLGdCQUFMLEdBQXdCLElBQUlDLEdBQUosRUFBeEI7QUFDRDs7QUFFREMsRUFBQUEscUJBQXFCLENBQUNDLFFBQUQsRUFBbUJDLFNBQW5CLEVBQTRDO0FBQy9ELFFBQUksQ0FBQyxLQUFLSixnQkFBTCxDQUFzQkssR0FBdEIsQ0FBMEJGLFFBQTFCLENBQUwsRUFBMEM7QUFDeEMsV0FBS0gsZ0JBQUwsQ0FBc0JNLEdBQXRCLENBQTBCSCxRQUExQixFQUFvQyxFQUFwQztBQUNEOztBQUNELFVBQU1JLFVBQVUsR0FBRyxLQUFLUCxnQkFBTCxDQUFzQlEsR0FBdEIsQ0FBMEJMLFFBQTFCLENBQW5CO0FBQ0FJLElBQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkwsU0FBaEI7QUFDRDs7QUFFRE0sRUFBQUEsd0JBQXdCLENBQUNQLFFBQUQsRUFBbUJDLFNBQW5CLEVBQTRDO0FBQ2xFLFVBQU1HLFVBQVUsR0FBRyxLQUFLUCxnQkFBTCxDQUFzQlEsR0FBdEIsQ0FBMEJMLFFBQTFCLENBQW5COztBQUNBLFFBQUksT0FBT0ksVUFBUCxLQUFzQixXQUExQixFQUF1QztBQUNyQ0ksc0JBQU9DLEtBQVAsQ0FBYSxrQ0FBYixFQUFpRFQsUUFBakQ7O0FBQ0E7QUFDRDs7QUFFRCxVQUFNVSxLQUFLLEdBQUdOLFVBQVUsQ0FBQ08sT0FBWCxDQUFtQlYsU0FBbkIsQ0FBZDs7QUFDQSxRQUFJUyxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ2JGLHNCQUFPQyxLQUFQLENBQWEsa0RBQWIsRUFBaUVULFFBQWpFLEVBQTJFQyxTQUEzRTs7QUFDQTtBQUNEOztBQUNERyxJQUFBQSxVQUFVLENBQUNRLE1BQVgsQ0FBa0JGLEtBQWxCLEVBQXlCLENBQXpCLEVBWmtFLENBYWxFOztBQUNBLFFBQUlOLFVBQVUsQ0FBQ1MsTUFBWCxJQUFxQixDQUF6QixFQUE0QjtBQUMxQixXQUFLaEIsZ0JBQUwsQ0FBc0JpQixNQUF0QixDQUE2QmQsUUFBN0I7QUFDRDtBQUNGOztBQUVEZSxFQUFBQSxvQkFBb0IsR0FBWTtBQUM5QixXQUFPLEtBQUtsQixnQkFBTCxDQUFzQm1CLElBQXRCLEdBQTZCLENBQXBDO0FBQ0Q7O0FBM0NnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuZXhwb3J0IHR5cGUgRmxhdHRlbmVkT2JqZWN0RGF0YSA9IHsgW2F0dHI6IHN0cmluZ106IGFueSB9O1xuZXhwb3J0IHR5cGUgUXVlcnlEYXRhID0geyBbYXR0cjogc3RyaW5nXTogYW55IH07XG5cbmNsYXNzIFN1YnNjcmlwdGlvbiB7XG4gIC8vIEl0IGlzIHF1ZXJ5IGNvbmRpdGlvbiBlZyBxdWVyeS53aGVyZVxuICBxdWVyeTogUXVlcnlEYXRhO1xuICBjbGFzc05hbWU6IHN0cmluZztcbiAgaGFzaDogc3RyaW5nO1xuICBjbGllbnRSZXF1ZXN0SWRzOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoY2xhc3NOYW1lOiBzdHJpbmcsIHF1ZXJ5OiBRdWVyeURhdGEsIHF1ZXJ5SGFzaDogc3RyaW5nKSB7XG4gICAgdGhpcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIHRoaXMuaGFzaCA9IHF1ZXJ5SGFzaDtcbiAgICB0aGlzLmNsaWVudFJlcXVlc3RJZHMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBhZGRDbGllbnRTdWJzY3JpcHRpb24oY2xpZW50SWQ6IG51bWJlciwgcmVxdWVzdElkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY2xpZW50UmVxdWVzdElkcy5oYXMoY2xpZW50SWQpKSB7XG4gICAgICB0aGlzLmNsaWVudFJlcXVlc3RJZHMuc2V0KGNsaWVudElkLCBbXSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RJZHMgPSB0aGlzLmNsaWVudFJlcXVlc3RJZHMuZ2V0KGNsaWVudElkKTtcbiAgICByZXF1ZXN0SWRzLnB1c2gocmVxdWVzdElkKTtcbiAgfVxuXG4gIGRlbGV0ZUNsaWVudFN1YnNjcmlwdGlvbihjbGllbnRJZDogbnVtYmVyLCByZXF1ZXN0SWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHJlcXVlc3RJZHMgPSB0aGlzLmNsaWVudFJlcXVlc3RJZHMuZ2V0KGNsaWVudElkKTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3RJZHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0NhbiBub3QgZmluZCBjbGllbnQgJWQgdG8gZGVsZXRlJywgY2xpZW50SWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gcmVxdWVzdElkcy5pbmRleE9mKHJlcXVlc3RJZCk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgbG9nZ2VyLmVycm9yKCdDYW4gbm90IGZpbmQgY2xpZW50ICVkIHN1YnNjcmlwdGlvbiAlZCB0byBkZWxldGUnLCBjbGllbnRJZCwgcmVxdWVzdElkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVxdWVzdElkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIC8vIERlbGV0ZSBjbGllbnQgcmVmZXJlbmNlIGlmIGl0IGhhcyBubyBzdWJzY3JpcHRpb25cbiAgICBpZiAocmVxdWVzdElkcy5sZW5ndGggPT0gMCkge1xuICAgICAgdGhpcy5jbGllbnRSZXF1ZXN0SWRzLmRlbGV0ZShjbGllbnRJZCk7XG4gICAgfVxuICB9XG5cbiAgaGFzU3Vic2NyaWJpbmdDbGllbnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50UmVxdWVzdElkcy5zaXplID4gMDtcbiAgfVxufVxuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbiJdfQ==