"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserFromSessionToken = exports.load = void 0;

var _graphql = require("graphql");

var _graphqlListFields = _interopRequireDefault(require("graphql-list-fields"));

var _node = _interopRequireDefault(require("parse/node"));

var _rest = _interopRequireDefault(require("../../rest"));

var _parseClassTypes = require("./parseClassTypes");

var _Auth = require("../../Auth");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getUserFromSessionToken = async (context, queryInfo, keysPrefix, userId) => {
  const {
    info,
    config
  } = context;

  if (!info || !info.sessionToken) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  }

  const sessionToken = info.sessionToken;
  const selectedFields = (0, _graphqlListFields.default)(queryInfo).filter(field => field.startsWith(keysPrefix)).map(field => field.replace(keysPrefix, ''));
  const keysAndInclude = (0, _parseClassTypes.extractKeysAndInclude)(selectedFields);
  const {
    keys
  } = keysAndInclude;
  let {
    include
  } = keysAndInclude;

  if (userId && !keys && !include) {
    return {
      sessionToken
    };
  } else if (keys && !include) {
    include = 'user';
  }

  if (userId) {
    // We need to re create the auth context
    // to avoid security breach if userId is provided
    context.auth = new _Auth.Auth({
      config,
      isMaster: context.auth.isMaster,
      user: {
        id: userId
      }
    });
  }

  const options = {};

  if (keys) {
    options.keys = keys.split(',').map(key => `${key}`).join(',');
  }

  if (include) {
    options.include = include.split(',').map(included => `${included}`).join(',');
  }

  const response = await _rest.default.find(config, context.auth, '_User', // Get the user it self from auth object
  {
    objectId: context.auth.user.id
  }, options, info.clientVersion, info.context);

  if (!response.results || response.results.length == 0) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  } else {
    const user = response.results[0];
    return {
      sessionToken,
      user
    };
  }
};

exports.getUserFromSessionToken = getUserFromSessionToken;

const load = parseGraphQLSchema => {
  if (parseGraphQLSchema.isUsersClassDisabled) {
    return;
  }

  parseGraphQLSchema.addGraphQLQuery('viewer', {
    description: 'The viewer query can be used to return the current user data.',
    type: new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType),

    async resolve(_source, _args, context, queryInfo) {
      try {
        return await getUserFromSessionToken(context, queryInfo, 'user.', false);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  }, true, true);
};

exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9HcmFwaFFML2xvYWRlcnMvdXNlcnNRdWVyaWVzLmpzIl0sIm5hbWVzIjpbImdldFVzZXJGcm9tU2Vzc2lvblRva2VuIiwiY29udGV4dCIsInF1ZXJ5SW5mbyIsImtleXNQcmVmaXgiLCJ1c2VySWQiLCJpbmZvIiwiY29uZmlnIiwic2Vzc2lvblRva2VuIiwiUGFyc2UiLCJFcnJvciIsIklOVkFMSURfU0VTU0lPTl9UT0tFTiIsInNlbGVjdGVkRmllbGRzIiwiZmlsdGVyIiwiZmllbGQiLCJzdGFydHNXaXRoIiwibWFwIiwicmVwbGFjZSIsImtleXNBbmRJbmNsdWRlIiwia2V5cyIsImluY2x1ZGUiLCJhdXRoIiwiQXV0aCIsImlzTWFzdGVyIiwidXNlciIsImlkIiwib3B0aW9ucyIsInNwbGl0Iiwia2V5Iiwiam9pbiIsImluY2x1ZGVkIiwicmVzcG9uc2UiLCJyZXN0IiwiZmluZCIsIm9iamVjdElkIiwiY2xpZW50VmVyc2lvbiIsInJlc3VsdHMiLCJsZW5ndGgiLCJsb2FkIiwicGFyc2VHcmFwaFFMU2NoZW1hIiwiaXNVc2Vyc0NsYXNzRGlzYWJsZWQiLCJhZGRHcmFwaFFMUXVlcnkiLCJkZXNjcmlwdGlvbiIsInR5cGUiLCJHcmFwaFFMTm9uTnVsbCIsInZpZXdlclR5cGUiLCJyZXNvbHZlIiwiX3NvdXJjZSIsIl9hcmdzIiwiZSIsImhhbmRsZUVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSx1QkFBdUIsR0FBRyxPQUFPQyxPQUFQLEVBQWdCQyxTQUFoQixFQUEyQkMsVUFBM0IsRUFBdUNDLE1BQXZDLEtBQWtEO0FBQ2hGLFFBQU07QUFBRUMsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQTtBQUFSLE1BQW1CTCxPQUF6Qjs7QUFDQSxNQUFJLENBQUNJLElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNFLFlBQW5CLEVBQWlDO0FBQy9CLFVBQU0sSUFB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Q0FBQ0UsZUFBbkIsQ0FDRSxRQURGLEVBRUU7QUFDRUMsSUFBQUEsV0FBVyxFQUFFLCtEQURmO0FBRUVDLElBQUFBLElBQUksRUFBRSxJQUFJQyx1QkFBSixDQUFtQkwsa0JBQWtCLENBQUNNLFVBQXRDLENBRlI7O0FBR0UsVUFBTUMsT0FBTixDQUFjQyxPQUFkLEVBQXVCQyxLQUF2QixFQUE4QjlDLE9BQTlCLEVBQXVDQyxTQUF2QyxFQUFrRDtBQUNoRCxVQUFJO0FBQ0YsZUFBTyxNQUFNRix1QkFBdUIsQ0FBQ0MsT0FBRCxFQUFVQyxTQUFWLEVBQXFCLE9BQXJCLEVBQThCLEtBQTlCLENBQXBDO0FBQ0QsT0FGRCxDQUVFLE9BQU84QyxDQUFQLEVBQVU7QUFDVlYsUUFBQUEsa0JBQWtCLENBQUNXLFdBQW5CLENBQStCRCxDQUEvQjtBQUNEO0FBQ0Y7O0FBVEgsR0FGRixFQWFFLElBYkYsRUFjRSxJQWRGO0FBZ0JELENBckJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTE5vbk51bGwgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCBnZXRGaWVsZE5hbWVzIGZyb20gJ2dyYXBocWwtbGlzdC1maWVsZHMnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHJlc3QgZnJvbSAnLi4vLi4vcmVzdCc7XG5pbXBvcnQgeyBleHRyYWN0S2V5c0FuZEluY2x1ZGUgfSBmcm9tICcuL3BhcnNlQ2xhc3NUeXBlcyc7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vQXV0aCc7XG5cbmNvbnN0IGdldFVzZXJGcm9tU2Vzc2lvblRva2VuID0gYXN5bmMgKGNvbnRleHQsIHF1ZXJ5SW5mbywga2V5c1ByZWZpeCwgdXNlcklkKSA9PiB7XG4gIGNvbnN0IHsgaW5mbywgY29uZmlnIH0gPSBjb250ZXh0O1xuICBpZiAoIWluZm8gfHwgIWluZm8uc2Vzc2lvblRva2VuKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTiwgJ0ludmFsaWQgc2Vzc2lvbiB0b2tlbicpO1xuICB9XG4gIGNvbnN0IHNlc3Npb25Ub2tlbiA9IGluZm8uc2Vzc2lvblRva2VuO1xuICBjb25zdCBzZWxlY3RlZEZpZWxkcyA9IGdldEZpZWxkTmFtZXMocXVlcnlJbmZvKVxuICAgIC5maWx0ZXIoZmllbGQgPT4gZmllbGQuc3RhcnRzV2l0aChrZXlzUHJlZml4KSlcbiAgICAubWFwKGZpZWxkID0+IGZpZWxkLnJlcGxhY2Uoa2V5c1ByZWZpeCwgJycpKTtcblxuICBjb25zdCBrZXlzQW5kSW5jbHVkZSA9IGV4dHJhY3RLZXlzQW5kSW5jbHVkZShzZWxlY3RlZEZpZWxkcyk7XG4gIGNvbnN0IHsga2V5cyB9ID0ga2V5c0FuZEluY2x1ZGU7XG4gIGxldCB7IGluY2x1ZGUgfSA9IGtleXNBbmRJbmNsdWRlO1xuXG4gIGlmICh1c2VySWQgJiYgIWtleXMgJiYgIWluY2x1ZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vzc2lvblRva2VuLFxuICAgIH07XG4gIH0gZWxzZSBpZiAoa2V5cyAmJiAhaW5jbHVkZSkge1xuICAgIGluY2x1ZGUgPSAndXNlcic7XG4gIH1cblxuICBpZiAodXNlcklkKSB7XG4gICAgLy8gV2UgbmVlZCB0byByZSBjcmVhdGUgdGhlIGF1dGggY29udGV4dFxuICAgIC8vIHRvIGF2b2lkIHNlY3VyaXR5IGJyZWFjaCBpZiB1c2VySWQgaXMgcHJvdmlkZWRcbiAgICBjb250ZXh0LmF1dGggPSBuZXcgQXV0aCh7XG4gICAgICBjb25maWcsXG4gICAgICBpc01hc3RlcjogY29udGV4dC5hdXRoLmlzTWFzdGVyLFxuICAgICAgdXNlcjogeyBpZDogdXNlcklkIH0sXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge307XG4gIGlmIChrZXlzKSB7XG4gICAgb3B0aW9ucy5rZXlzID0ga2V5c1xuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoa2V5ID0+IGAke2tleX1gKVxuICAgICAgLmpvaW4oJywnKTtcbiAgfVxuICBpZiAoaW5jbHVkZSkge1xuICAgIG9wdGlvbnMuaW5jbHVkZSA9IGluY2x1ZGVcbiAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAubWFwKGluY2x1ZGVkID0+IGAke2luY2x1ZGVkfWApXG4gICAgICAuam9pbignLCcpO1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXN0LmZpbmQoXG4gICAgY29uZmlnLFxuICAgIGNvbnRleHQuYXV0aCxcbiAgICAnX1VzZXInLFxuICAgIC8vIEdldCB0aGUgdXNlciBpdCBzZWxmIGZyb20gYXV0aCBvYmplY3RcbiAgICB7IG9iamVjdElkOiBjb250ZXh0LmF1dGgudXNlci5pZCB9LFxuICAgIG9wdGlvbnMsXG4gICAgaW5mby5jbGllbnRWZXJzaW9uLFxuICAgIGluZm8uY29udGV4dFxuICApO1xuICBpZiAoIXJlc3BvbnNlLnJlc3VsdHMgfHwgcmVzcG9uc2UucmVzdWx0cy5sZW5ndGggPT0gMCkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX1NFU1NJT05fVE9LRU4sICdJbnZhbGlkIHNlc3Npb24gdG9rZW4nKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB1c2VyID0gcmVzcG9uc2UucmVzdWx0c1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vzc2lvblRva2VuLFxuICAgICAgdXNlcixcbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCBsb2FkID0gcGFyc2VHcmFwaFFMU2NoZW1hID0+IHtcbiAgaWYgKHBhcnNlR3JhcGhRTFNjaGVtYS5pc1VzZXJzQ2xhc3NEaXNhYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhcnNlR3JhcGhRTFNjaGVtYS5hZGRHcmFwaFFMUXVlcnkoXG4gICAgJ3ZpZXdlcicsXG4gICAge1xuICAgICAgZGVzY3JpcHRpb246ICdUaGUgdmlld2VyIHF1ZXJ5IGNhbiBiZSB1c2VkIHRvIHJldHVybiB0aGUgY3VycmVudCB1c2VyIGRhdGEuJyxcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChwYXJzZUdyYXBoUUxTY2hlbWEudmlld2VyVHlwZSksXG4gICAgICBhc3luYyByZXNvbHZlKF9zb3VyY2UsIF9hcmdzLCBjb250ZXh0LCBxdWVyeUluZm8pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4oY29udGV4dCwgcXVlcnlJbmZvLCAndXNlci4nLCBmYWxzZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBwYXJzZUdyYXBoUUxTY2hlbWEuaGFuZGxlRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICB0cnVlLFxuICAgIHRydWVcbiAgKTtcbn07XG5cbmV4cG9ydCB7IGxvYWQsIGdldFVzZXJGcm9tU2Vzc2lvblRva2VuIH07XG4iXX0=