"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeSchema = makeSchema;
exports.CLP = void 0;

// @Typescript 4.1+ // type CLPPermission = 'requiresAuthentication' | '*' |  `user:${string}` | `role:${string}`
class CLP {
  static allow(perms) {
    const out = {};

    for (const [perm, ops] of Object.entries(perms)) {
      // -disable-next Property `@@iterator` is missing in mixed [1] but exists in `$Iterable` [2].
      for (const op of ops) {
        out[op] = out[op] || {};
        out[op][perm] = true;
      }
    }

    return out;
  }

}

exports.CLP = CLP;

function makeSchema(className, schema) {
  // This function solve two things:
  // 1. It provides auto-completion to the users who are implementing schemas
  // 2. It allows forward-compatible point in order to allow future changes to the internal structure of JSONSchema without affecting all the users
  schema.className = className;
  return schema;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TY2hlbWFNaWdyYXRpb25zL01pZ3JhdGlvbnMuanMiXSwibmFtZXMiOlsiQ0xQIiwiYWxsb3ciLCJwZXJtcyIsIm91dCIsInBlcm0iLCJvcHMiLCJPYmplY3QiLCJlbnRyaWVzIiwib3AiLCJtYWtlU2NoZW1hIiwiY2xhc3NOYW1lIiwic2NoZW1hIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWdEQTtBQXNCTyxNQUFNQSxHQUFOLENBQVU7QUFDSCxTQUFMQyxLQUFLLENBQUNDLEtBQUQsRUFBa0Q7QUFDNUQsVUFBTUMsR0FBRyxHQUFHLEVBQVo7O0FBRUEsU0FBSyxNQUFNLENBQUNDLElBQUQsRUFBT0MsR0FBUCxDQUFYLElBQTBCQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUwsS0FBZixDQUExQixFQUFpRDtBQUMvQztBQUNBLFdBQUssTUFBTU0sRUFBWCxJQUFpQkgsR0FBakIsRUFBc0I7QUFDcEJGLFFBQUFBLEdBQUcsQ0FBQ0ssRUFBRCxDQUFILEdBQVVMLEdBQUcsQ0FBQ0ssRUFBRCxDQUFILElBQVcsRUFBckI7QUFDQUwsUUFBQUEsR0FBRyxDQUFDSyxFQUFELENBQUgsQ0FBUUosSUFBUixJQUFnQixJQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBT0QsR0FBUDtBQUNEOztBQWJjOzs7O0FBZ0JWLFNBQVNNLFVBQVQsQ0FBb0JDLFNBQXBCLEVBQThDQyxNQUE5QyxFQUE4RTtBQUNuRjtBQUNBO0FBQ0E7QUFDQUEsRUFBQUEsTUFBTSxDQUFDRCxTQUFQLEdBQW1CQSxTQUFuQjtBQUVBLFNBQU9DLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZW1hT3B0aW9ucyB7XG4gIGRlZmluaXRpb25zOiBKU09OU2NoZW1hW107XG4gIHN0cmljdDogP2Jvb2xlYW47XG4gIGRlbGV0ZUV4dHJhRmllbGRzOiA/Ym9vbGVhbjtcbiAgcmVjcmVhdGVNb2RpZmllZEZpZWxkczogP2Jvb2xlYW47XG4gIGxvY2tTY2hlbWFzOiA/Ym9vbGVhbjtcbiAgYmVmb3JlTWlncmF0aW9uOiA/KCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XG4gIGFmdGVyTWlncmF0aW9uOiA/KCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCB0eXBlIEZpZWxkVmFsdWVUeXBlID1cbiAgfCAnU3RyaW5nJ1xuICB8ICdCb29sZWFuJ1xuICB8ICdGaWxlJ1xuICB8ICdOdW1iZXInXG4gIHwgJ1JlbGF0aW9uJ1xuICB8ICdQb2ludGVyJ1xuICB8ICdEYXRlJ1xuICB8ICdHZW9Qb2ludCdcbiAgfCAnUG9seWdvbidcbiAgfCAnQXJyYXknXG4gIHwgJ09iamVjdCdcbiAgfCAnQUNMJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZFR5cGUge1xuICB0eXBlOiBGaWVsZFZhbHVlVHlwZTtcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBkZWZhdWx0VmFsdWU/OiBtaXhlZDtcbiAgdGFyZ2V0Q2xhc3M/OiBzdHJpbmc7XG59XG5cbnR5cGUgQ2xhc3NOYW1lVHlwZSA9ICdfVXNlcicgfCAnX1JvbGUnIHwgc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb3RlY3RlZEZpZWxkc0ludGVyZmFjZSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4SW50ZXJmYWNlIHtcbiAgW2tleTogc3RyaW5nXTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4ZXNJbnRlcmZhY2Uge1xuICBba2V5OiBzdHJpbmddOiBJbmRleEludGVyZmFjZTtcbn1cblxuZXhwb3J0IHR5cGUgQ0xQT3BlcmF0aW9uID0gJ2ZpbmQnIHwgJ2NvdW50JyB8ICdnZXQnIHwgJ3VwZGF0ZScgfCAnY3JlYXRlJyB8ICdkZWxldGUnO1xuLy8gQFR5cGVzY3JpcHQgNC4xKyAvLyB0eXBlIENMUFBlcm1pc3Npb24gPSAncmVxdWlyZXNBdXRoZW50aWNhdGlvbicgfCAnKicgfCAgYHVzZXI6JHtzdHJpbmd9YCB8IGByb2xlOiR7c3RyaW5nfWBcblxudHlwZSBDTFBWYWx1ZSA9IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9O1xudHlwZSBDTFBEYXRhID0geyBba2V5OiBzdHJpbmddOiBDTFBPcGVyYXRpb25bXSB9O1xudHlwZSBDTFBJbnRlcmZhY2UgPSB7IFtrZXk6IHN0cmluZ106IENMUFZhbHVlIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSlNPTlNjaGVtYSB7XG4gIGNsYXNzTmFtZTogQ2xhc3NOYW1lVHlwZTtcbiAgZmllbGRzPzogeyBba2V5OiBzdHJpbmddOiBGaWVsZFR5cGUgfTtcbiAgaW5kZXhlcz86IEluZGV4ZXNJbnRlcmZhY2U7XG4gIGNsYXNzTGV2ZWxQZXJtaXNzaW9ucz86IHtcbiAgICBmaW5kPzogQ0xQVmFsdWUsXG4gICAgY291bnQ/OiBDTFBWYWx1ZSxcbiAgICBnZXQ/OiBDTFBWYWx1ZSxcbiAgICB1cGRhdGU/OiBDTFBWYWx1ZSxcbiAgICBjcmVhdGU/OiBDTFBWYWx1ZSxcbiAgICBkZWxldGU/OiBDTFBWYWx1ZSxcbiAgICBhZGRGaWVsZD86IENMUFZhbHVlLFxuICAgIHByb3RlY3RlZEZpZWxkcz86IFByb3RlY3RlZEZpZWxkc0ludGVyZmFjZSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIENMUCB7XG4gIHN0YXRpYyBhbGxvdyhwZXJtczogeyBba2V5OiBzdHJpbmddOiBDTFBEYXRhIH0pOiBDTFBJbnRlcmZhY2Uge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBbcGVybSwgb3BzXSBvZiBPYmplY3QuZW50cmllcyhwZXJtcykpIHtcbiAgICAgIC8vIEBmbG93LWRpc2FibGUtbmV4dCBQcm9wZXJ0eSBgQEBpdGVyYXRvcmAgaXMgbWlzc2luZyBpbiBtaXhlZCBbMV0gYnV0IGV4aXN0cyBpbiBgJEl0ZXJhYmxlYCBbMl0uXG4gICAgICBmb3IgKGNvbnN0IG9wIG9mIG9wcykge1xuICAgICAgICBvdXRbb3BdID0gb3V0W29wXSB8fCB7fTtcbiAgICAgICAgb3V0W29wXVtwZXJtXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVNjaGVtYShjbGFzc05hbWU6IENsYXNzTmFtZVR5cGUsIHNjaGVtYTogSlNPTlNjaGVtYSk6IEpTT05TY2hlbWEge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHNvbHZlIHR3byB0aGluZ3M6XG4gIC8vIDEuIEl0IHByb3ZpZGVzIGF1dG8tY29tcGxldGlvbiB0byB0aGUgdXNlcnMgd2hvIGFyZSBpbXBsZW1lbnRpbmcgc2NoZW1hc1xuICAvLyAyLiBJdCBhbGxvd3MgZm9yd2FyZC1jb21wYXRpYmxlIHBvaW50IGluIG9yZGVyIHRvIGFsbG93IGZ1dHVyZSBjaGFuZ2VzIHRvIHRoZSBpbnRlcm5hbCBzdHJ1Y3R1cmUgb2YgSlNPTlNjaGVtYSB3aXRob3V0IGFmZmVjdGluZyBhbGwgdGhlIHVzZXJzXG4gIHNjaGVtYS5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG5cbiAgcmV0dXJuIHNjaGVtYTtcbn1cbiJdfQ==