"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webhookRouter = exports.tagsMap = void 0;
var express_1 = __importDefault(require("express"));
var streams_1 = require("@moralisweb3/streams");
var body_parser_1 = __importDefault(require("body-parser"));
var upsert_1 = require("./upsert");
exports.tagsMap = new Map();
var collectionNameBuilder = new streams_1.CollectionNameBuilder();
var logsProcessor = new streams_1.LogsProcessor(collectionNameBuilder);
var txsProcessor = new streams_1.TxsProcessor(collectionNameBuilder);
var internalTxProcessor = new streams_1.InternalTxsProcessor(collectionNameBuilder);
var verifySignature = function (req, streams) {
    var providedSignature = req.headers['x-signature'];
    if (!providedSignature) {
        throw new Error('Signature not provided');
    }
    streams.verifySignature({
        body: req.body,
        signature: providedSignature,
    });
};
var webhookRouter = function (parseObject, webhookUrl, streams) {
    return express_1.default.Router().post(webhookUrl, body_parser_1.default.json({ limit: '50mb' }), function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
        var updates, batch, logUpdates, txUpdates, internalTxUpdates, results_1, upsert_2, _loop_1, tableName, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    try {
                        verifySignature(req, streams);
                    }
                    catch (e) {
                        return [2 /*return*/, res.status(401).json({ message: e.message })];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    updates = {};
                    batch = req.body;
                    logUpdates = logsProcessor.process(batch);
                    txUpdates = txsProcessor.process(batch);
                    internalTxUpdates = internalTxProcessor.process(batch);
                    // Prepare updates
                    if (!updates['Logs']) {
                        updates['Logs'] = [];
                    }
                    updates['Logs'].push(prepareUpdate(logUpdates, ['logIndex', 'transactionHash']));
                    if (!updates['Txs']) {
                        updates['Txs'] = [];
                    }
                    updates['Txs'].push(prepareUpdate(txUpdates, ['transactionIndex']));
                    if (!updates['TxsInternal']) {
                        updates['TxsInternal'] = [];
                    }
                    updates['TxsInternal'].push(prepareUpdate(internalTxUpdates, ['hash']));
                    results_1 = [];
                    upsert_2 = new upsert_1.Upsert(parseObject);
                    _loop_1 = function (tableName) {
                        for (var index = 0; index < updates[tableName].length; index++) {
                            var data = updates[tableName][index];
                            data.forEach(function (_a) {
                                var filter = _a.filter, update = _a.update;
                                results_1.push(upsert_2.execute(tableName, filter, update));
                            });
                        }
                    };
                    // eslint-disable-next-line guard-for-in
                    for (tableName in updates) {
                        _loop_1(tableName);
                    }
                    return [4 /*yield*/, Promise.all(results_1)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    // eslint-disable-next-line no-console
                    console.log('error while inserting logs', e_1.message);
                    return [2 /*return*/, res.status(500).json({ message: 'error while inserting logs' })];
                case 4: return [2 /*return*/, res.status(200).json({ message: 'ok' })];
            }
        });
    }); });
};
exports.webhookRouter = webhookRouter;
var prepareUpdate = function (updates, filters) {
    var results = [];
    var _loop_2 = function (update) {
        results.push({
            filter: filters.reduce(function (acc, filter) {
                // @ts-ignore
                acc[filter] = update.document[filter];
                return acc;
            }, {}),
            update: update,
            upsert: true,
        });
    };
    for (var _i = 0, updates_1 = updates; _i < updates_1.length; _i++) {
        var update = updates_1[_i];
        _loop_2(update);
    }
    return results;
};
//# sourceMappingURL=webbhook.js.map